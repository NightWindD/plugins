apiVersion: plugins.kubegems.io/v1beta1
kind: Plugin
metadata:
  name: opentelemetry-collector
  namespace: "{{ .Release.Namespace }}"
spec:
  kind: helm
  url: https://open-telemetry.github.io/opentelemetry-helm-charts
  chart: opentelemetry-collector
  version: "{{ .Chart.AppVersion }}"
  values:
    config:
      extensions:
        health_check: {}
        memory_ballast: {}
        pprof:
          endpoint: 0.0.0.0:1777
      processors:
        k8sattributes:
          passthrough: true
        spanmetrics:
          metrics_exporter: prometheusremotewrite
          latency_histogram_buckets: [1ms, 10ms, 100ms, 500ms, 1s, 10s]
          dimensions_cache_size: 2000
          dimensions:
            - name: namespace
            - name: pod
            - name: http.status_code
      exporters:
        jaeger:
          endpoint: {{ .Values.tracing.jaeger.proto.address }}
          tls:
            insecure: true
        prometheusremotewrite:
          endpoint: {{ .Values.monitoring.prometheus.rwrite.address }}
          #wal:
          #  directory: /wal
          external_labels:
            source: opentelemetry
            instance: ${MY_POD_IP}
          resource_to_telemetry_conversion:
            enabled: true
      service:
        extensions:
        - health_check
        - memory_ballast
        - pprof
        pipelines:
          traces:
            processors:
              - batch
              - memory_limiter
              - k8sattributes
              - spanmetrics
            exporters:
              - jaeger
          metrics:
            exporters:
              - prometheusremotewrite
    image:
      {{ include "common.images.repository" ( dict "registry" "docker.io" "repository" "otel/opentelemetry-collector-contrib" "context" .) }}
    mode: deployment
    replicaCount: {{ .Values.opentelemetry.replicaCount }}
    #extraVolumeMounts:
    #- name: wal
    #  mountPath: /wal
    #extraVolumes:
    #- name: wal
    #  emptyDir: {}
    ports:
      metrics:
        enabled: true
      pprof:
        enabled: true
        containerPort: 1777
        servicePort: 1777
        hostPort: 1777
        protocol: TCP
    clusterRole:
      create: true
      rules:
      - apiGroups:
        - ''
        resources:
        - 'pods'
        - 'nodes'
        verbs:
        - 'get'
        - 'list'
        - 'watch'
    resources:
      limits:
        cpu: {{ .Values.opentelemetry.resources.limits.cpu }}
        memory: {{ .Values.opentelemetry.resources.limits.memory }}
      requests:
        cpu: 100m
        memory: 128Mi